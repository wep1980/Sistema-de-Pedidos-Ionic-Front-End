{"version":3,"sources":["../../src/services/auth.service.ts","../../node_modules/@angular/core/esm5 lazy","../../src lazy","../../src/services/domain/cliente.service.ts","../../src/services/domain/categoria.service.ts","../../src/services/domain/produto.service.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/config/api.config.ts","../../src/services/storage.service.ts","../../src/config/storage_keys.config.ts","../../src/app/app.component.ts","../../src/app/interceptors/error-interceptor.ts","../../src/app/interceptors/auth-interceptor.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["\r\n/* Serviço de Autorização -- Esse serviço precisa ser chamado na home.ts */\r\n\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { JwtHelper } from \"angular2-jwt\";\r\nimport { API_CONFIG } from \"../config/api.config\";\r\nimport { CredenciaisDTO } from \"../models/credencias.dto\";\r\nimport { LocalUser } from \"../models/local_user\";\r\nimport { StorageService } from \"./storage.service\";\r\n\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n\r\n    // Instalado atraves do npm install --save angular2-jwt\r\n    jwtHelper: JwtHelper = new JwtHelper();\r\n\r\n    // O HttpClient faz a comunicação com o ENDPOINT login\r\n    constructor(\r\n        public http: HttpClient,\r\n        public storage: StorageService) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Método que recebe as credencias do usuario para autenticação.\r\n     * \r\n     * o método recebe 3 argumentos: a URL, as credencias do usuario e um\r\n     * Objeto que pega o header da resposta observe: 'response' e o responseType: 'text' que é do tipo text \r\n     * e não um JSON pq o ENDPOINT de login retorna uma resposta de corpo vazio senão o framework tenta\r\n     * fazer um parse e ocorre um erro ( Evita o erro de parse do JSON de um corpo vazio )\r\n     * @param creds \r\n     */\r\n    authenticate(creds: CredenciaisDTO) {\r\n        return this.http.post(`${API_CONFIG.baseUrl}/login`,\r\n            creds,\r\n            {\r\n                observe: 'response',\r\n                responseType: 'text'\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Metodo de sucesso ao realizar o login\r\n     * authorizationValue -> Recebe o token\r\n     */\r\n    successfulLogin(authorizationValue: string) {\r\n        // Retira a palavra Bearer com espaço e pega somente o token\r\n        let tok = authorizationValue.substring(7);\r\n        let user: LocalUser = {\r\n            token: tok,\r\n            email: this.jwtHelper.decodeToken(tok).sub // pegando o email do token\r\n        };\r\n        this.storage.setLocalUser(user);\r\n    }\r\n\r\n    /**\r\n     * Metodo de logout\r\n     */\r\n    logout() {\r\n        this.storage.setLocalUser(null); // Remove do localstorage o usuario\r\n    }\r\n\r\n    /**\r\n     * Metodo que atualiza o token quando esta proximo de expirar.\r\n     * Quando o usuario utilizar o app nao vai precisar logar caso o token ainda esteja valido.\r\n     * \r\n     * OBS: O token e incluido automaticamente na requisição.\r\n     * \r\n     * responseType: 'text' -> O response type e do tipo text pq a resposta vem em um corpo vazio e para o framework\r\n     * não dar erro de parse achando que e JSON.\r\n     */\r\n    refreshToken() {\r\n        return this.http.post(`${API_CONFIG.baseUrl}/auth/refresh_token`,\r\n            {}, // Os dados que serão enviados nesse requisição e um objeto vazio(Não tem nada para ser enviado)\r\n            {\r\n                observe: 'response',\r\n                responseType: 'text'\r\n            });\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/auth.service.ts","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 163;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/esm5 lazy\n// module id = 163\n// module chunks = 5","var map = {\n\t\"../pages/categorias/categorias.module\": [\n\t\t682,\n\t\t4\n\t],\n\t\"../pages/home/home.module\": [\n\t\t683,\n\t\t3\n\t],\n\t\"../pages/produtos/produtos.module\": [\n\t\t684,\n\t\t2\n\t],\n\t\"../pages/profile/profile.module\": [\n\t\t686,\n\t\t1\n\t],\n\t\"../pages/signup/signup.module\": [\n\t\t685,\n\t\t0\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids)\n\t\treturn Promise.reject(new Error(\"Cannot find module '\" + req + \"'.\"));\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(ids[0]);\n\t});\n};\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 209;\nmodule.exports = webpackAsyncContext;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 209\n// module chunks = 5","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { API_CONFIG } from \"../../config/api.config\";\r\nimport { ClienteDTO } from \"../../models/cliente.dto\";\r\nimport { StorageService } from \"../storage.service\";\r\n\r\n\r\n@Injectable()\r\nexport class ClienteService {\r\n\r\n    constructor(\r\n        public http: HttpClient, \r\n        public storage: StorageService) {\r\n    }\r\n\r\n\r\n    /**\r\n     * Método que busca um usuario por email pogando por parametro o email digitado pelo usuario\r\n     * @param email \r\n     */\r\n    findByEmail(email: string): Observable<ClienteDTO> {\r\n\r\n       // let token = this.storage.getLocalUser().token; // let token -> variavel temporaria\r\n\r\n        // Cabeçalho que sera enviado\r\n       // let authHeader = new HttpHeaders({'Authorization': 'Bearer ' + token});\r\n\r\n        return this.http.get<ClienteDTO>(\r\n            `${API_CONFIG.baseUrl}/clientes/email?value=${email}`);\r\n           // {'headers': authHeader}); //passa o cabeçalho para a requisição\r\n    }\r\n\r\n\r\n    /**\r\n     * Metodo que busca a imagem do Usuario no bucket da amazon.\r\n     * Recebe um Id, Observable<any> -> any e um tipo do typeScript que aceita qq coisa(casa com todo mundo).\r\n     * cp${id} -> cp e o prefixo da imagem e id do cliente\r\n     * {responseType : 'blob'} -> resposta blob, é uma imagem e não um JSON\r\n     * @param id \r\n     */\r\n    getImageFromBucket(id : string) : Observable<any> {\r\n        let url = `${API_CONFIG.bucketBaseUrl}/cp${id}.jpg` \r\n        return this.http.get(url, {responseType : 'blob'});\r\n    }\r\n\r\n\r\n    /**\r\n     * Método para inserir cliente\r\n     * @param obj \r\n     */\r\n    insert(obj : ClienteDTO){\r\n       return this.http.post(`${API_CONFIG.baseUrl}/clientes`, obj, \r\n       {\r\n          observe: 'response',\r\n          responseType: 'text' // Como o corpo vem vazio isso evita o erro de parse do JSON\r\n       }\r\n       );\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/domain/cliente.service.ts","import {  Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { API_CONFIG } from \"../../config/api.config\";\r\nimport { Observable } from \"rxjs/Rx\"; // IMPORTAÇÃO CORRETA DO Observable\r\nimport { CategoriaDTO } from \"../../models/categoria.dto\";\r\n\r\n@Injectable() // A Classe pode ser injetada em outras classes\r\nexport class CategoriaService {\r\n\r\n    constructor(public http: HttpClient) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Método que busca todas as categorias\r\n     * A crase `` permite colocar variaveis no string sem precisar ficar concatenando o operador +\r\n     * ${} -> Permite colocar variaveis\r\n     * Retorna o tipo de dados -> CategoriaDTO[] Lista de CategoriaDTO\r\n     * get<CategoriaDTO[]> -> get tipado = Lista de CategoriaDTO\r\n     * \r\n     * OBS : A Requisição HTTP é assincrona( CHAMADA AJAX ) e necessario se inscrever para receber essa requisição\r\n     * O Angular encapsula essa requisição assincrona por meio de um objeto chamado Observable.\r\n     * O retorno do método então e do tipo Observable< CategoriaDTO[] > \r\n     */\r\n    findAll() : Observable <CategoriaDTO[]> {\r\n\r\n        return this.http.get<CategoriaDTO[]> (`${API_CONFIG.baseUrl}/categorias`);\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/domain/categoria.service.ts","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { API_CONFIG } from '../../config/api.config';\r\nimport { Observable } from 'rxjs/Rx'; // IMPORTANTE: IMPORT ATUALIZADO\r\n\r\n@Injectable()\r\nexport class ProdutoService {\r\n\r\n  constructor(public http: HttpClient) {\r\n  }\r\n\r\n  findByCategoria(categoria_id : string) {\r\n    return this.http.get(`${API_CONFIG.baseUrl}/produtos/?categorias=${categoria_id}`);\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/domain/produto.service.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","/**\n * TODAS AS CLASSES QUE SÃO UTILIZADAS NO CORPO DO SCRIPT PRECISAM ESTAR IMPORTADAS AQUI EMBAIXO\n */\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http'; // Import do HTTPCLIENT\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\n\nimport { MyApp } from './app.component';\n\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { CategoriaService } from '../services/domain/categoria.service';\nimport { ErrorInterceptorProvider } from './interceptors/error-interceptor';\nimport { AuthService } from '../services/auth.service';\nimport { StorageService } from '../services/storage.service';\nimport { ClienteService } from '../services/domain/cliente.service';\nimport { AuthInterceptorProvider } from './interceptors/auth-interceptor';\nimport { ProdutoService } from '../services/domain/produto.service';\n\n/**\n * Decorator -> é uma anotação que contém configurações para alterar a classe\n */\n@NgModule({\n  declarations: [ // Aqui ficam a lista de componentes ou paginas que fazem parte deste modulo\n    MyApp\n  ],\n  imports: [ // Lista de modulos que são importados por este modulo\n    BrowserModule,\n    HttpClientModule,\n    IonicModule.forRoot(MyApp),\n  ],\n  bootstrap: [IonicApp], // Bootstrap -> tem a indicação de como a aplicação vai iniciar\n  entryComponents: [  // Quando o declaration for uma pagina e não um componente, essa pagina precisa ser declarada aqui também\n    MyApp\n  ],\n  providers: [ // Aqui se declara as classes que os objetos injetaveis sejam uma instancia unica para este modulo\n    StatusBar,\n    SplashScreen,\n    {provide: ErrorHandler, useClass: IonicErrorHandler},\n    \n    /** CategoriaService -> Registro do serviço no escopo global da aplicação, \n     * pois e um serviço que vai ser muito utilizado.\n     * Unica instancia servindo toda aplicação\n     */\n    CategoriaService,\n    /**\n     * Colocar o cabeçalho na requisição( AuthInterceptorProvider ) tem que ser feito antes do tratamento de erro.\n     * Para controlar a ordem em que os interceptors serão executados é so colocar um antes do outro \n     * aqui no providers.\n     */\n    AuthInterceptorProvider, \n    ErrorInterceptorProvider,\n    AuthService,\n    StorageService,\n    ClienteService,\n    ProdutoService\n  ]\n})\n/**\n * Export -> permite que uma classe ou elemento import o AppModule( torna-se visivel em outros lugares )\n */\nexport class AppModule {} \n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","// ARQUIVO DE CONFIGURAÇÕES DA API COMO OBJETOS JSON\r\n\r\nexport const API_CONFIG = {\r\n    baseUrl: \"http://localhost:8080\", // URL base do SpringBoot\r\n    bucketBaseUrl: \"https://spring-ionic-mc.s3-sa-east-1.amazonaws.com\" // URL Amazon imagens\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/config/api.config.ts","import { Injectable } from \"@angular/core\";\r\nimport { STORAGE_KEYS } from \"../config/storage_keys.config\";\r\nimport { LocalUser } from \"../models/local_user\";\r\n\r\n\r\n// Serviço que salva e obtem o usuario logado\r\n\r\n@Injectable()\r\nexport class StorageService {\r\n\r\n    /**\r\n     * Método que obtem o usuario logado\r\n     */\r\n    getLocalUser(): LocalUser {\r\n        let usr = localStorage.getItem(STORAGE_KEYS.localUser);\r\n        if (usr == null) {\r\n            return null;\r\n        } else {\r\n            return JSON.parse(usr); // O localstorage armazena string, por esse motivo o parse\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Recebe o localUser e armazena no storage\r\n     * @param obj \r\n     */\r\n    setLocalUser(obj: LocalUser) {\r\n        if(obj == null){\r\n            localStorage.removeItem(STORAGE_KEYS.localUser);\r\n        }else{\r\n            /**Armazenando no localstorage que é convertido para string pois e o formato que ele aceita */\r\n            localStorage.setItem(STORAGE_KEYS.localUser, JSON.stringify(obj));\r\n        }\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/storage.service.ts","// Local de armazenamento dos nomes das chaves do storage -- Acessa o usuario logado\r\nexport const STORAGE_KEYS = {\r\n    localUser: \"localUser\"\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/config/storage_keys.config.ts","import { Component, ViewChild } from '@angular/core';\nimport { Nav, Platform } from 'ionic-angular';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { AuthService } from '../services/auth.service';\n\n\n\n/**\n * Pagina controladora da pagina app.html ( TODAS AS PAGINAS HTML TEM UM CONTROLADOR )\n */\n@Component({\n  templateUrl: 'app.html'\n})\nexport class MyApp {\n  @ViewChild(Nav) nav: Nav;\n\n  rootPage: String = 'HomePage'; // Configuração da página inicial do aplicativo\n\n  pages: Array<{ title: string, component: String }>;\n\n  constructor(\n    public platform: Platform,\n    public statusBar: StatusBar,\n    public splashScreen: SplashScreen,\n    public auth: AuthService) {\n    this.initializeApp();\n\n    // Paginas que aparecem no menu\n    this.pages = [\n      { title: 'Profile', component: 'ProfilePage' },\n      { title: 'Categorias', component: 'CategoriasPage' },\n      { title: 'Logout', component: '' }\n    ];\n\n  }\n\n  initializeApp() {\n    this.platform.ready().then(() => {\n      // Okay, so the platform is ready and our plugins are available.\n      // Here you can do any higher level native things you might need.\n      this.statusBar.styleDefault();\n      this.splashScreen.hide();\n    });\n  }\n\n  /**\n   * Tipando o page que vai ser um objeto que tera titulo e um componente, com isso pode ser acessado os atributos.\n   * @param page \n   */\n  openPage(page: { title: string, component: string }) {\n    switch (page.title) {\n      case 'Logout':\n        this.auth.logout(); // retira o token do usuario do armazenamento(LocalStorage)\n        this.nav.setRoot('HomePage'); // Redireciona para pagina de login\n        break;\n\n      default:\n        this.nav.setRoot(page.component);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","// Classe de tratamento de erros global. Existe a possibilidade de tratamento pelo Controller\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Rx'; // IMPORTANTE: IMPORT ATUALIZADO\r\nimport { StorageService } from '../../services/storage.service';\r\nimport { AlertController } from 'ionic-angular';\r\nimport { FieldMessage } from '../../models/fieldmessage';\r\n\r\n\r\n\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n\r\n    constructor(public storage: StorageService, public alertCtrl: AlertController) {\r\n    }\r\n\r\n    /**\r\n     * Método que intercepta as requisições\r\n     */\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // console.log(\"Passou no interceptor\");\r\n        return next.handle(req)\r\n            .catch((error, caught) => {\r\n\r\n                let errorObj = error;\r\n                if (errorObj.error) {\r\n                    errorObj = errorObj.error;\r\n                }\r\n                /** Se a resposta não vier no formato JSON, ou seja, não tiver o campo status, vira no formato text, \r\n                 * então sera feita a conversão para JSON */\r\n                if (!errorObj.status) {\r\n                    errorObj = JSON.parse(errorObj);\r\n                }\r\n\r\n                console.log(\"Erro detectado pelo interceptor:\"); // A responsabilidade de imprimir na tela e aqui do interceptor\r\n                console.log(errorObj);\r\n\r\n                /**\r\n                 * Tratamento de erros especificos do status.\r\n                 * Tratamento do erro 403.\r\n                 * \r\n                 * Para testar, no console do navegador inserir um token invalido:\r\n                 * localStorage.setItem('localUser',\r\n                  '{\"token\":\"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJuZWxpby5jdXJzb3NAZ21haWwuY29tIiwiZXhwIjoxNTEzNjkxMTE1fQ.\r\n                  Bg8nyUf5Hsw2CC3dQffZrip822eFB18jNLrsySe51Eb-SioUH-uq7CQ4dWoBixZmzT-PWdE1iZZ1uRhuaaaaa\",\r\n                 \"email\":\"nelio.cursos@gmail.com\"}')\r\n                 */\r\n                switch (errorObj.status) {\r\n                    case 401:\r\n                        this.handle401();\r\n                        break;\r\n                    case 403:\r\n                        this.handle403();\r\n                        break;\r\n                    case 422:\r\n                        this.handle422(errorObj);\r\n                        break;\r\n\r\n                    default:\r\n                        this.handleDefaultError(errorObj);\r\n                }\r\n                return Observable.throw(error);\r\n            }) as any;\r\n    }\r\n\r\n    /**\r\n     * Método que trata o 403.\r\n     * Força a limpeza do localStorage(Um usuario que estava no storage esta invalido)\r\n     */\r\n    handle403() {\r\n        this.storage.setLocalUser(null);\r\n    }\r\n\r\n    handle401() {\r\n        let alert = this.alertCtrl.create({\r\n            title: 'Erro 401: falha de autenticação',\r\n            message: 'Email ou senha incorretos',\r\n            /**\r\n             * Para sair do alert o usuatio precisa apertar no botão do alert, isso é opcional,\r\n             * mas dessa forma pode ser feito um tratamento especial para ele\r\n             */\r\n            enableBackdropDismiss: false,\r\n            buttons: [\r\n                {\r\n                    text: 'Ok'\r\n                }\r\n            ]\r\n        });\r\n        alert.present(); // Mostra o botão\r\n    }\r\n\r\n\r\n    handle422(errorObj){\r\n        let alert = this.alertCtrl.create({\r\n            title: 'Erro 422: Validação',\r\n            message: this.listErrors(errorObj.errors), // Função que monta a lista de erros de acordo com backend classe ValidationError variavel = private List<FieldMessage> errors = new ArrayList<>();\r\n            enableBackdropDismiss: false,\r\n            buttons: [\r\n                {\r\n                    text: 'Ok'\r\n                }\r\n            ]\r\n        });\r\n        alert.present(); // Mostra o botão\r\n    }\r\n\r\n    /**\r\n     * Metodo de error\r\n     * @param errorObj \r\n     */\r\n    handleDefaultError(errorObj) {\r\n        let alert = this.alertCtrl.create({\r\n            title: 'Erro ' + errorObj.status + ': ' + errorObj.error,\r\n            message: errorObj.message,\r\n            enableBackdropDismiss: false,\r\n            buttons: [\r\n                {\r\n                    text: 'Ok'\r\n                }\r\n            ]\r\n        });\r\n        alert.present(); // Mostra o botão\r\n    }\r\n\r\n    // Recebe uma lista de FieldMessage[]\r\n    listErrors(messages: FieldMessage[]) : string {\r\n        let s : string = '';\r\n        /*Percorre todos os elementos da lista de mesagem acrescentando um <p>paragrafo destacando o nome do campo<strong> mais a descrição da mesagem*/\r\n        for(var i = 0; i < messages.length; i++){\r\n            s = s + '<p><strong>' + messages[i].fieldName + \"</strong>: \" + messages[i].message\r\n        }\r\n        return s;\r\n    }\r\n}\r\n\r\n\r\n\r\n// Declaração do provider do interceptor\r\nexport const ErrorInterceptorProvider = {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: ErrorInterceptor,\r\n    multi: true,\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/app/interceptors/error-interceptor.ts","// Classe que intercepta o token nas requisições\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Rx'; // IMPORTANTE: IMPORT ATUALIZADO\r\nimport { StorageService } from '../../services/storage.service';\r\nimport { API_CONFIG } from '../../config/api.config';\r\n\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(public storage: StorageService) {\r\n    }\r\n\r\n    /**\r\n     * Método que intercepta as requisições\r\n     * \r\n     * Para inserir o cabeçalho na requisição e necessario fazer um clone(copia) dessa requisição.\r\n     * \r\n     * O cabeçalho(header Authorization) inserido na requisição so deve ser enviado para o BACKEND, ou seja\r\n     * quando for uma requisição vinda de outro local não precisa ser enviado o cabeçalho, a lógica é\r\n     * a comparar as URLs da requisição\r\n     */\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // console.log(\"Passou no interceptor\");\r\n\r\n        let localUser = this.storage.getLocalUser();\r\n\r\n        let N = API_CONFIG.baseUrl.length; //Pegando o tamanho da string da baseUrl para comparação\r\n\r\n        // Recortando a string da url a partir do primeiro caracter ate o tamanho total da baseUrl\r\n        let requestToAPI = req.url.substring(0, N) == API_CONFIG.baseUrl;\r\n\r\n        if (localUser && requestToAPI) {\r\n            const authReq = req.clone({ headers: req.headers.set('Authorization', 'Bearer ' + localUser.token) });\r\n            return next.handle(authReq);\r\n        } else {\r\n            return next.handle(req); // Se não existir o localUser ele propaga a requisição original.\r\n        }\r\n\r\n    }\r\n}\r\n\r\n// Declaração do provider do interceptor\r\nexport const AuthInterceptorProvider = {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: AuthInterceptor,\r\n    multi: true,\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/app/interceptors/auth-interceptor.ts"],"sourceRoot":""}