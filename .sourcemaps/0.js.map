{"version":3,"sources":["../../src/pages/signup/signup.module.ts","../../src/services/domain/cidade.service.ts","../../src/services/domain/estado.service.ts","../../src/pages/signup/signup.ts"],"names":[],"mappings":"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","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { CidadeService } from '../../services/domain/cidade.service';\nimport { EstadoService } from '../../services/domain/estado.service';\nimport { SignupPage } from './signup';\n\n@NgModule({\n  declarations: [\n    SignupPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SignupPage),\n  ],\n  providers: [\n    CidadeService, // Declaração de servico das cidades\n    EstadoService // // Declaração de servico dos estados\n  ]\n})\nexport class SignupPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/signup/signup.module.ts","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { API_CONFIG } from \"../../config/api.config\";\r\nimport { CidadeDTO } from \"../../models/cidade.dto\";\r\nimport { Observable } from \"rxjs/Rx\"; // IMPORTAÇÃO CORRETA DO Observable\r\n\r\n@Injectable() // A Classe pode ser injetada em outras classes\r\nexport class CidadeService {\r\n\r\n    constructor(public http: HttpClient) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Método que busca todas as cidades de um estado\r\n     * A crase `` permite colocar variaveis no string sem precisar ficar concatenando o operador +\r\n     * ${} -> Permite colocar variaveis\r\n     * Retorna o tipo de dados -> CidadeDTO[] Lista de CidadeDTO\r\n     * get<CidadeDTO[]> -> get tipado = Lista de CidadeDTO\r\n     * \r\n     * OBS : A Requisição HTTP é assincrona( CHAMADA AJAX ) e necessario se inscrever para receber essa requisição\r\n     * O Angular encapsula essa requisição assincrona por meio de um objeto chamado Observable.\r\n     * O retorno do método então e do tipo Observable< CidadeDTO[] > \r\n     */\r\n    findAll(estado_id : string) : Observable <CidadeDTO[]> {\r\n\r\n        return this.http.get<CidadeDTO[]> (`${API_CONFIG.baseUrl}/estados/${estado_id}/cidades`);\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/domain/cidade.service.ts","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { API_CONFIG } from \"../../config/api.config\";\r\nimport { Observable } from \"rxjs/Rx\"; // IMPORTAÇÃO CORRETA DO Observable\r\nimport { EstadoDTO } from \"../../models/estado.dto\";\r\n\r\n@Injectable() // A Classe pode ser injetada em outras classes\r\nexport class EstadoService {\r\n\r\n    constructor(public http: HttpClient) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Método que busca todas as cidades de um estado\r\n     * A crase `` permite colocar variaveis no string sem precisar ficar concatenando o operador +\r\n     * ${} -> Permite colocar variaveis\r\n     * Retorna o tipo de dados -> EstadoDTO[] Lista de EstadoDTO\r\n     * get<EstadoDTO[]> -> get tipado = Lista de EstadoDTO\r\n     * \r\n     * OBS : A Requisição HTTP é assincrona( CHAMADA AJAX ) e necessario se inscrever para receber essa requisição\r\n     * O Angular encapsula essa requisição assincrona por meio de um objeto chamado Observable.\r\n     * O retorno do método então e do tipo Observable< EstadoDTO[] > \r\n     */\r\n    findAll() : Observable <EstadoDTO[]> {\r\n\r\n        return this.http.get<EstadoDTO[]> (`${API_CONFIG.baseUrl}/estados`);\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/domain/estado.service.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CidadeService } from '../../services/domain/cidade.service';\nimport { EstadoService } from '../../services/domain/estado.service';\nimport { EstadoDTO } from '../../models/estado.dto';\nimport { CidadeDTO } from '../../models/cidade.dto';\n\n\n\n@IonicPage()\n@Component({\n  selector: 'page-signup',\n  templateUrl: 'signup.html',\n})\nexport class SignupPage {\n\n  formGroup: FormGroup;\n\n  // Armazena os estados\n  estados: EstadoDTO[];\n\n  // Armazena as cidades\n  cidades: CidadeDTO[];\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public formBuilder: FormBuilder,\n    public cidadeService: CidadeService,\n    public estadoService: EstadoService) {\n\n    /**\n     * Instanciando um formGroup dentro do construtor.\n     * group() -> responsavel por instanciar o formGroup.\n     * \n     * Todas as validações sintaticas e que não precisam ir no banco de dados serão as mesmas feitas no backend,\n     * assim evita requisições no servidor desnecessarias.\n     */\n    this.formGroup = this.formBuilder.group({\n      nome: ['waldir', [Validators.required, Validators.minLength(5), Validators.maxLength(120)]],\n      email: ['wepjavamail@gmail.com', [Validators.required, Validators.email, Validators.maxLength(120)]],\n      tipoCliente: ['1', [Validators.required]],\n      cpfOuCnpj: ['08180009700', [Validators.required, Validators.minLength(11), Validators.maxLength(14)]],\n      senha: ['123', [Validators.required]],\n      logradouro: ['Rua Santa Clara', [Validators.required]],\n      numero: ['271', [Validators.required]],\n      complemento: ['apto 207', []],\n      bairro: ['Copacabana', []],\n      cep: ['22041011', [Validators.required]],\n      telefone1: ['990561880', [Validators.required]],\n      telefone2: ['', []],\n      telefone3: ['', []],\n      estadoId: [null, [Validators.required]],\n      cidadeId: [null, [Validators.required]]\n    });\n  }\n\n  /**\n   * Método que inicia automaticamente quando a pagina e chamada\n   */\n  ionViewDidLoad() {\n    this.estadoService.findAll().subscribe(response => {\n      this.estados = response;\n      //Pega o primeiro elemento da lista e atribui na lista estadoId do formulario\n      this.formGroup.controls.estadoId.setValue(this.estados[0].id);\n      console.log(this.estados);\n      // Busca as cidades correspondente ao estado selecionado\n      this.updateCidades();\n    },\n    error => {});\n  }\n\n  updateCidades(){\n    // Variavel que pega o estado selecionado na lista do HTML do formulario\n    let estado_id = this.formGroup.value.estado_id;\n    this.cidadeService.findAll(estado_id).subscribe(response => {\n      this.cidades = response;\n\n      /**\n       * Desceleciona a cidade que estava selecionado no formulario, pq como acabou acabou de mudar de estado\n       * não vai ficar nenhuma cidade selecionada\n       */\n      this.formGroup.controls.cidadeId.setValue(null);\n    },\n    error => {});\n  }\n\n  signupUser() {\n    console.log('Enviou o form');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/signup/signup.ts"],"sourceRoot":""}