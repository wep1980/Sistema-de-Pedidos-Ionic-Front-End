{"version":3,"sources":["../../src/pages/order-confirmation/order-confirmation.module.ts","../../src/services/domain/pedido.service.ts","../../src/pages/order-confirmation/order-confirmation.ts"],"names":[],"mappings":"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","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { PedidoService } from '../../services/domain/pedido.service';\nimport { OrderConfirmationPage } from './order-confirmation';\n\n@NgModule({\n  declarations: [\n    OrderConfirmationPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(OrderConfirmationPage),\n  ],\n  providers : [\n    PedidoService\n  ]\n})\nexport class OrderConfirmationPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/order-confirmation/order-confirmation.module.ts","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { API_CONFIG } from \"../../config/api.config\";\r\nimport { PedidoDTO } from \"../../models/pedido.dto\";\r\n\r\n@Injectable()\r\nexport class PedidoService {\r\n\r\n    constructor(public http: HttpClient) {\r\n    }\r\n\r\n    /**\r\n     * Metodo que insere um pedido\r\n     * @param obj \r\n     */\r\n    insert(obj: PedidoDTO) {\r\n        return this.http.post(\r\n            `${API_CONFIG.baseUrl}/pedidos`,\r\n            obj,\r\n            {\r\n                observe: 'response',\r\n                responseType: 'text'\r\n            }\r\n        );\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/domain/pedido.service.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { PedidoDTO } from '../../models/pedido.dto';\nimport { CartItem } from '../../models/cart-item';\nimport { EnderecoDTO } from '../../models/endereco.dto';\nimport { ClienteDTO } from '../../models/cliente.dto';\nimport { ClienteService } from '../../services/domain/cliente.service';\nimport { CartService } from '../../services/domain/cart.service';\nimport { PedidoService } from '../../services/domain/pedido.service';\n\n@IonicPage()\n@Component({\n  selector: 'page-order-confirmation',\n  templateUrl: 'order-confirmation.html',\n})\nexport class OrderConfirmationPage {\n\n  pedido: PedidoDTO;\n  cartItems: CartItem[]; // Para mostrar os itens do carrinho\n  cliente: ClienteDTO; // Para mostrar o cliente logado\n  endereco: EnderecoDTO; // Para mostrar o endereço\n  codpedido: string;\n\n  constructor(\n    public navCtrl: NavController, \n    public navParams: NavParams,\n    public clienteService: ClienteService,\n    public cartService: CartService,\n    public pedidoService: PedidoService) {\n\n    // Carregando o pedido no construtor - Passa o pedido como parametro de uma pagina para outra  \n    this.pedido = this.navParams.get('pedido');\n  }\n\n  ionViewDidLoad() {\n    this.cartItems = this.cartService.getCart().items; // Carrega os itens do carrinho\n\n    this.clienteService.findById(this.pedido.cliente.id) // Busca o id do cliente que esta no objeto pedido\n      .subscribe(response => { // se inscreve para receber a resposta. Na resposta vem um cliente completo com todos os dados, é necessario fazer um casting para ClienteDTO que recebe apenas id, nome e email\n        this.cliente = response as ClienteDTO;\n        // No objeto de pedido tem somente o id, para pegar os dados e chamada a funcao que busca os endereços atraves do id do endereço de entrega na lista dos endereços do cliente\n        this.endereco = this.findEndereco(this.pedido.enderecoDeEntrega.id, response['enderecos']);\n      },\n      error => {\n        this.navCtrl.setRoot('HomePage'); // se acontecer algum erro e redirecionado para pagina inicial\n      });\n  }\n\n  /**\n   * Função que procura os endereços\n   * @param id \n   * @param list \n   */\n  private findEndereco(id: string, list: EnderecoDTO[]) : EnderecoDTO {\n    let position = list.findIndex(x => x.id == id); // Encontra a posição do objeto x tal que x.id seja igual ao id passado por parametro\n    return list[position];\n  }\n\n  // Mostra o valor total do pedido\n  total() : number {\n    return this.cartService.total();\n  } \n\n  checkout() {\n    this.pedidoService.insert(this.pedido)\n      .subscribe(response => {\n        this.cartService.createOrClearCart(); // Limpa o carrinho depois de salvar o pedido no BD \n        //console.log(response.headers.get('location')); // Pegando o location do headers do novo recurso salvo(Postman) -- Para o location funcionar no angular, no cap.8 aula 95 é ensinado como expor o location\n        this.codpedido = this.extractId(response.headers.get('location')); // Extrai o id da URL que esta contida em location do novo pedido salvo\n      },\n      error => {\n        if (error.status == 403) {\n          this.navCtrl.setRoot('HomePage');\n        }\n      });\n  }\n\n  /**\n   * Metodo para voltar a pagina de carrinho\n   */\n  back() {\n    this.navCtrl.setRoot('CartPage');\n  }\n\n\n  /**\n   * Metodo que pega o id da URL contida no location\n   * @param location \n   */\n  private extractId(location : string) : string {\n    let position = location.lastIndexOf('/'); // achando a ultima posição do subString informado no ('/')\n    return location.substring(position + 1, location.length); // recorta o caracter que estiver na frente da /\n  }\n\n  /**\n   * Retorna para a pagina de categorias\n   */\n  home() {\n    this.navCtrl.setRoot('CategoriasPage');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/order-confirmation/order-confirmation.ts"],"sourceRoot":""}